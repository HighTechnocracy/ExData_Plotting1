inv <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv      ## Return a matrix that is the inverse of 'x'
}
a <- matrix(runif(4))
a <- dim(a, nrow=2)
a <- dim(a) <- c(2,2)
a
a <- matrix(runif(4), nrow=2, ncol=2)
a
b <- solve(a)
makeCacheMatrix(a)
c <- makeCacheMatrix(a)
d<- cache(Solve)
d <- cacheSolve(a)
a$getinv()
a[getinv()]
x[getinv()]
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <<- function(y) {
x <<- y
m <<- NULL
}
get <<- function() x
setinv <<- function(solve) inv <<- solve
getinv <<- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
inv <- getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- get()
inv <- solve(data, ...)
setinv(inv)
inv      ## Return a matrix that is the inverse of 'x'
}
c <- makeCacheMatrix(a)
cacheSolve(c)
cacheSolve(a)
cacheSolve(b)
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
makeCacheMatrix(b)
rm(a)
rm(b)
rm(c)
rm(d)
a <- runif(4)
a
matrix(a)
b <- matrix(a)
b
b <- matrix(a, nrow = 2, ncol = 2)
b
a <- b
a
rm(b)
makeCacheMatrix(a)
b <- makeCacheMatrix(a)
cacheSolve(a)
cacheSolve(b)
c <- cacheSolve(b)
b <- solve(a)
identical(b, c)
str(d)
x <- rnorm(100, 2, 4)
summary(x)
str(x)
hist(x)
str(x$get)
str(airquality)
rm(b)
rm(c)
rm(a)
rm(d)
rm(x)
rm(cacheSolve)
rm(makeCacheMatrix)
m <- matrix(rnorm(100), 10, 10)
m
str(m)
s <- split(airquality, airquality$Month)
s
s[9]
s[,9]
s[ , 9]
s$9
s[9,]
s[, 9]
s
s$'9'
rpois(100, 2, 4)
rpois(100, 2)
x <- rpois(100, 2)
lm(x)
glm(x)
graph(x)
chart(x)
hist(x)
plot(x)
rm(m)
rm(s)
rm(x)
letters(a:e)
letter(a:e)
alphabet(a:e)
as.character(1:10)
a <- as.character(1:10)
class(a)
match(a, 3)
rm(b)
rmc
rm(c)
rm(a)
rm(d)
a <- makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
a
cacheSolve(a)
cacheSolve(a)
a$get()
cacheSolve(a)
a$getinverse()
a$setinverse()
matrix(c(1,2,3,4), nrow=2, ncol=2)
b <- matrix(c(1,2,3,4), nrow=2, ncol=2)
solve(b)
makeCacheMatrix(b)
c <- makeCacheMatrix(b)
cacheSolve(c)
inv <- solve
inv
solve(x)
rm(b)
rm(a)
rm(c)
rm(cacheSolve)
rm(inv)
rm(makeCacheMatrix)
## Matrix inversion is usually a costly computation and their may be some benefit to caching
## the inverse of a matrix rather than compute it repeatedly. The following pair of functions
## cache the inverse of a matrix.
## This function creates a special "matrix" object that can cache its inverse.
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## This function computes the inverse of the special "matrix" returned by makeCacheMatrix
## above. If the inverse has already been calculated (and the matrix has not changed), then the
## cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(amatrix)
mat <- matrix(1:4, 2,2)
solve(mat)
makeCacheMatrix(mat)
b <- makeCacheMatrix(mat)
cacheSolve(b)
d <- runif(4)
matrix(d)
e <- matrix(d)
e <- matrix((d), nrow=2, ncol=2)
e
f <- makeCacheMatrix(f)
cacheSolve(f)
solve(f)
d <- matrix((runif(4)), nrow=2, ncol=2)
d
solve(d)
e <- makeCacheMatrix(d)
cacheSolve(e)
e$set(c(1,2,3,4), nrow=2, ncol=2)
e$set(matrix(c(1,2,3,4), nrow=2, ncol=2))
f < -e$set(matrix(c(1,2,3,4), nrow=2, ncol=2))
f <- e$set(matrix(c(1,2,3,4), nrow=2, ncol=2))
cacheSolve(f)
set.seed(1)
rpois(5, 2)
rm(d, mat, amatrix, b,e,f)
rm(cacheSolve, makeCacheMatrix)
unzippedFile <- unz("household_power_consumption.zip", "household_power_consumption.txt")
power <- read.table(unzippedFile, head = TRUE, sep = ";", na.strings = "?", stringsAsFactors=FALSE)
unzippedFile <- unz("household_power_consumption.zip", "household_power_consumption.txt")
power <- read.table(unzippedFile, head = TRUE, sep = ";", na.strings = "?", stringsAsFactors=FALSE)
power <- read.table(unzippedFile, head = TRUE, sep = ";", na.strings = "?")
power <- read.table("./Desktop/household_power_consumption.txt", head = TRUE, sep = ";", na.strings = "?", stringsAsFactors=FALSE)
power_base <- power[power$Date >= "2007-01-02" & power$Date <= "2007-02-02", ]
rm(power_base)
class(power$Date)
class(power$Time)
dateteime <- cbind(power$Date, power$Time)
head(datetime)
datetime <- dateteime
rm(dateteime)
head(datetime)
datetime <- vector()
for (i in 1:length(a)) {
next_item <- paste(a[i], b[i])
Date_Time <- rbind(Date_Time, next_item)
}
for (i in 1:length(power)) {
next_item <- paste(a[i], b[i])
Date_Time <- rbind(Date_Time, next_item)
}
for (i in 1:length(power)) {
next_item <- paste(power$Date[i], power$Time[i])
datetime <- rbind(datetime, next_item)
}
head(datetime)
class(datetime[1])
head(power)
cbind(datetime, power[3:9])
length
length(datetime)
datetime
nrow(power)
for (i in 1:nrow(power)) {
next_item <- paste(power$Date[i], power$Time[i])
datetime <- rbind(datetime, next_item)
}
rm(datetime)
datetime <- vector()
for (i in 1:nrow(power)) {
next_item <- paste(power$Date[i], power$Time[i])
datetime <- rbind(datetime, next_item)
}
rm(datetime)
rm(i)
rm(next_item)
datetime <- vector()
datetime <- character()
for (i in 1:nrow(power)) {
next_item <- paste(power$Date[i], power$Time[i])
datetime <- rbind(datetime, next_item)
}
paste(power$Date[1], power$Time[1])
rm(datetime)
rm(i)
rm(next_item)
datetime <- character()
for (i in 1:nrow(power)) {
next_item <- paste(power$Date[i], power$Time[i])
datetime <- rbind(datetime, next_item)
}
head(power)
class(power[1])
class(power[1,1])
head(class)
head(power)
power[1,1] == 16/12/2006
power[1,1] == "16/12/2006"
power_base <- transform(power, Date = as.Date(Date, format = "%d/%m/%Y"))
power_base <- power_base[power_base$Date >= "2007-01-02" & power_base$Date <= "2007-02-02", ]
paste(power_base$Date[1], power_base$Time[1])
a <- paste(power_base$Date[1], power_base$Time[1])
class(a)
as.Date(a, format - "%d/%m/%Y %H:%M:%S"")
)
)
as.Date(a, format = "%d/%m/%Y %H:%M:%S"")
as.Date(a, format = "%d/%m/%Y %H:%M:%S")
strptime(a, format = "%d/%m/%Y %H:%M:%S")
strptime(a, format = "%Y-/%m-/%d %H:%M:%S")
a
class(a)
rm(datetime)
rm(power)
rm(powerbase, a, i)
rm(next_item, power_base, unzippedFile)
power <- read.table(unzippedFile, head = TRUE, sep = ";", na.strings = "?", stringsAsFactors=FALSE)
power <- read.table("./Desktop/household_power_consumption.txt", head = TRUE, sep = ";", na.strings = "?", stringsAsFactors=FALSE)
power_base <- transform(power, Date = as.Date(Date, format = "%d/%m/%Y"))
power_base <- power_base[power_base$Date >= "2007-01-02" & power_base$Date <= "2007-02-02", ]
datetime <- character()
for (i in 1:nrow(power_base)) {
next_item <- paste(power_base$Date[i], power_base$Time[i])
datetime <- rbind(datetime, next_item)
}
head(datetime)
cbind(datetime, power_base[3:9])
power2 <- cbind(datetime, power_base[3:9])
head(power2)
power2 <- transform(power2, datetime = as.POSIXct(datetime, format = "%d/%m/%Y %H:%M:%S"))
head(power2)
power2 <- cbind(datetime, power_base[3:9])
head(power2)
class(power2[1])
class(power2[1,1])
head(power_base)
class(power_base[1,1])
datetime <- character()
for (i in 1:nrow(power_base)) {
item[i] <- paste(power_base$Date[i], power_base$Time[i])
datetime <- rbind(datetime, next_item)
}
class(power2)
class(power2[1,1])
power2 <- transform(power2, datetime = as.character(datetime))
class(power2[1,1])
power3 <- transform(power2, datetime = as.POSIXct(datetime, format = "%d/%m/%Y %H:%M:%S"))
class(power3[1,1])
pData <- transform(power2, datetime = as.POSIXct(datetime, format = "%d/%m/%Y %H:%M:%S"))
hist(pData$Global_active_power, col="red", xlab="Global Active Power
(kilowatts)", main="Global Active Power", xlim=c(0, 6), ylim=c(0, 1200))
rm(pData, power, power_base, power2, power3, next_item, i)
rm(datetime)
power <- read.table("./Desktop/household_power_consumption.txt", head = TRUE, sep = ";", na.strings = "?", stringsAsFactors=FALSE)
power_base <- transform(power, Date = as.Date(Date, format = "%d/%m/%Y"))
power_base <- power_base[power_base$Date >= "2007-02-01" & power_base$Date <= "2007-02-02", ]
datetime <- character()
for (i in 1:nrow(power_base)) {
next_item <- paste(power_base$Date[i], power_base$Time[i])
datetime <- rbind(datetime, next_item)
}
power2 <- cbind(datetime, power_base[3:9])
power2 <- transform(power2, datetime = as.character(datetime))
pData <- transform(power2, datetime = as.POSIXct(datetime, format = "%d/%m/%Y %H:%M:%S"))
hist(pData$Global_active_power, col="red", xlab="Global Active Power
(kilowatts)", main="Global Active Power", xlim=c(0, 6), ylim=c(0, 1200))
plot(pData$DT, pData$Global_active_power, ylab="Global Active Power (kilowatts)",
ylim=c(0, 6), xlab="", type="l")
Data$DT, pData$Global_active_power, ylab="Global Active Power (kilowatts)", ylim=c(0, 6), xlab="", type="l")
atetime, pData$Global_active_power, ylab="Global Active Power (kilowatts)", ylim=c(0, 6), xlab="", type="l")
plot(pData$datetime, pData$Global_active_power, ylab="Global Active Power (kilowatts)", ylim=c(0, 6), xlab="", type="l")
plot(pData$datetime, pData$Global_active_power, ylab="Global Active Power (kilowatts)",
ylim=c(0, 6), xlab="", type="l")
plot(pData$datetime, pData$Global_active_power, ylab="Global Active Power (kilowatts)",
xlab="", type="l")
plot(pData$datetime, pData$Global_active_power)
plot(pData$datetime, pData$Global_active_power, ylab="Global Active Power (kilowatts)",
xlim=c(2007-02-01 00:00:00, 2007-02-02 23:59:00), ylim=c(0, 6), xlab="", type="l")
plot(pData$datetime, pData$Global_active_power, ylab="Global Active Power (kilowatts)",
xlim=c("2007-02-01 00:00:00", "2007-02-02 23:59:00"), ylim=c(0, 6), xlab="", type="l")
head(pData)
head(datetime)
strptime(datetime, format="%d/%m/%Y %H:%M:%S")
strptime(datetime, format="%Y-%m-%d %H:%M:%S")
datetime <- strptime(datetime, format="%Y-%m-%d %H:%M:%S")
power2 <- cbind(datetime, power_base[3:9])
head(power2)
pData <- cbind(datetime, power_base[3:9])
hist(pData$Global_active_power, col="red", xlab="Global Active Power
(kilowatts)", main="Global Active Power", xlim=c(0, 6), ylim=c(0, 1200))
plot(pData$datetime, pData$Global_active_power, ylab="Global Active Power (kilowatts)",
ylim=c(0, 6), xlab="", type="l")
plot(pData$DT, pData$Sub_metering_1, type="l", ylab="Energy sub metering", ylim=c(0, 30), xlab="")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), pch=c("_", "_", "_"), col=c("black", "red", "blue"))
lines(pData$DT, pData$Sub_metering_2, type="l", col="red")
lines(pData$DT, pData$Sub_metering_3, type="l", col="blue")
plot(pData$datetime, pData$Sub_metering_1, type="l", ylab="Energy sub metering", ylim=c(0, 30), xlab="")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), pch=c("_", "_", "_"), col=c("black", "red", "blue"))
lines(pData$datetime, pData$Sub_metering_2, type="l", col="red")
lines(pData$datetime, pData$Sub_metering_3, type="l", col="blue")
par(mfcol = c(2,2), mar=c(4,3,3,1)) ##Will put four plots in, columns filled in first.
##plot code from plot2
plot(pData$DT, pData$Global_active_power, ylab="Global Active Power",
ylim=c(0, 6), xlab="", type="l")
##plot code from plot3 removing border from legent (bty="n")
plot(pData$DT, pData$Sub_metering_1, type="l", ylab="Energy sub metering", ylim=c(0, 30), xlab="")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), pch=c("_", "_", "_"), col=c("black", "red", "blue"), bty="n")
lines(pData$DT, pData$Sub_metering_2, type="l", col="red")
lines(pData$DT, pData$Sub_metering_3, type="l", col="blue")
##plot code from plot4c
plot(pData$DT, pData$Voltage, ylab="Voltage", xlab="datetime", type="l")
##plot code from plot 4d
plot(pData$DT, pData$Global_reactive_power, ylab="Global_reactive_power", xlab="datetime", type="l")
par(mfcol = c(2,2), mar=c(4,3,3,1)) ##Will put four plots in, columns filled in first.
##plot code from plot2
plot(pData$datetime, pData$Global_active_power, ylab="Global Active Power",
ylim=c(0, 6), xlab="", type="l")
##plot code from plot3 removing border from legent (bty="n")
plot(pData$datetime, pData$Sub_metering_1, type="l", ylab="Energy sub metering", ylim=c(0, 30), xlab="")
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"), pch=c("_", "_", "_"), col=c("black", "red", "blue"), bty="n")
lines(pData$datetime, pData$Sub_metering_2, type="l", col="red")
lines(pData$datetime, pData$Sub_metering_3, type="l", col="blue")
##plot code from plot4c
plot(pData$datetime, pData$Voltage, ylab="Voltage", xlab="datetime", type="l")
##plot code from plot 4d
plot(pData$datetime, pData$Global_reactive_power, ylab="Global_reactive_power", xlab="datetime", type="l")
rm(pData, power, power_base, power2)
rm(datetime, i, next_item)
setwd("~/Desktop/ExData_Plotting1")
power <- read.table("~/Desktop/household_power_consumption.txt", head = TRUE,
sep = ";", na.strings = "?", stringsAsFactors=FALSE)
power_base <- transform(power, Date = as.Date(Date, format = "%d/%m/%Y"))
power_base <- power_base[power_base$Date >= "2007-02-01" &
power_base$Date <= "2007-02-02", ]
datetime <- character()
for (i in 1:nrow(power_base)) {
next_item <- paste(power_base$Date[i], power_base$Time[i])
datetime <- rbind(datetime, next_item)
}
datetime <- strptime(datetime, format="%Y-%m-%d %H:%M:%S")
pData <- cbind(datetime, power_base[3:9])
png("plot1.png", width=6, height=6, units="in", res=480)
hist(pData$Global_active_power, col="red", xlab="Global Active Power
(kilowatts)", main="Global Active Power", xlim=c(0, 6), ylim=c(0, 1200))
dev.off()
png("plot2.png", width=6, height=6, units="in", res=480)
plot(pData$datetime, pData$Global_active_power,
ylab="Global Active Power (kilowatts)",
ylim=c(0, 7.5), xlab="", type="l", yaxt="n")
axis(2, at=c(0,7.5), labels=c("",""), lwd.ticks=0)
axis(side = 2, at = seq(from = 0, to = 6, by = 2))
dev.off()
png("plot3.png", width=6, height=6, units="in", res=480)
plot(pData$datetime, pData$Sub_metering_1, type="l",
ylab="Energy sub metering", ylim=c(0, 40), yaxt="n", xlab="")
axis(2, at=c(0,40), labels=c("",""), lwd.ticks=0)
axis(side = 2, at = seq(from = 0, to = 30, by = 10))
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2",
"Sub_metering_3"), pch=c("_", "_", "_"), col=c("black", "red",
"blue"))
lines(pData$datetime, pData$Sub_metering_2, type="l", col="red")
lines(pData$datetime, pData$Sub_metering_3, type="l", col="blue")
dev.off()
png("plot4.png", width=7, height=7, units="in", res=480)
par(mfcol = c(2,2), mar=c(5,4,4,2))   ## Will put four plots in, columns
## filled in first.
##plot code from plot2
plot(pData$datetime, pData$Global_active_power,
ylab="Global Active Power (kilowatts)",
ylim=c(0, 7.5), xlab="", type="l", yaxt="n")
axis(2, at=c(0,7.5), labels=c("",""), lwd.ticks=0)
axis(side = 2, at = seq(from = 0, to = 6, by = 2))
##plot code from plot3 removing border from legent (bty="n")
plot(pData$datetime, pData$Sub_metering_1, type="l",
ylab="Energy sub metering", ylim=c(0, 40), yaxt="n", xlab="")
axis(2, at=c(0,40), labels=c("",""), lwd.ticks=0)
axis(side = 2, at = seq(from = 0, to = 30, by = 10))
legend("topright", legend = c("Sub_metering_1", "Sub_metering_2",
"Sub_metering_3"), pch=c("_", "_", "_"), col=c("black", "red",
"blue"), bty="n")
lines(pData$datetime, pData$Sub_metering_2, type="l", col="red")
lines(pData$datetime, pData$Sub_metering_3, type="l", col="blue")
## New plot
plot(pData$datetime, pData$Voltage, ylab="Voltage", xlab="datetime",
type="l")
## New plot
plot(pData$datetime, pData$Global_reactive_power,
ylab="Global_reactive_power", xlab="datetime", type="l")
dev.off()
